{"version":3,"sources":["state/index.js","components/home/index.js","components/comments/index.jsx","components/app/index.js","serviceWorker.js","index.js"],"names":["MachineContext","createContext","getCommentsUrl","id","fetchStories","a","fetch","then","r","json","stories","fetchComments","data","kids","Promise","all","map","url","comments","story","appMachine","Machine","initial","context","undefined","error","states","init","list","loading","invoke","src","onDone","target","actions","assign","event","onError","success","fail","storyId","on","LOAD_STORIES","LOAD_COMMENTS","Home","useContext","machine","sendToMachine","useEffect","style","padding","matches","color","toString","display","length","className","storyItem","index","key","to","title","comments_count","marginLeft","user","Comments","props","match","params","onClick","history","goBack","comment","deleted","dangerouslySetInnerHTML","__html","text","by","App","useMachine","currentMachine","Provider","value","path","component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.4ff55503.chunk.js","sourcesContent":["import { createContext } from \"react\";\nimport { assign, Machine } from \"xstate\";\n\nexport const MachineContext = createContext();\n\nconst storiesUrl = \"https://api.hnpwa.com/v0/news.json?page=1\";\nconst getCommentsUrl = (id) =>\n  `https://hacker-news.firebaseio.com/v0/item/${id}.json`;\n\nconst fetchStories = async () => {\n  const stories = await fetch(storiesUrl).then((r) => r.json());\n  return stories;\n};\n\nconst fetchComments = async (id) => {\n  const data = await fetch(getCommentsUrl(id)).then((r) => r.json());\n  const { kids } = data;\n  const comments = await Promise.all(\n    kids\n      .map((id) => getCommentsUrl(id))\n      .map((url) => fetch(url).then((r) => r.json()))\n  );\n  return { story: data, comments };\n};\n\nexport const appMachine = Machine({\n  id: \"app\",\n  initial: \"init\",\n  context: {\n    story: undefined,\n    stories: [],\n    comments: [],\n    error: undefined,\n  },\n  states: {\n    init: {},\n\n    list: {\n      states: {\n        loading: {\n          invoke: {\n            id: \"fetchStories\",\n            src: fetchStories,\n            onDone: {\n              target: \"success\",\n              actions: assign({ stories: (context, event) => event.data }),\n            },\n            onError: {\n              target: \"fail\",\n              actions: assign({ error: (context, event) => event.data }),\n            },\n          },\n        },\n        success: {},\n        fail: {},\n      },\n    },\n    comments: {\n      states: {\n        loading: {\n          invoke: {\n            id: \"fetchComments\",\n            src: (context, event) => fetchComments(event.storyId),\n            onDone: {\n              target: \"success\",\n              actions: assign({\n                story: (context, event) => event.data.story,\n                comments: (context, event) => event.data.comments,\n              }),\n            },\n            onError: {\n              target: \"fail\",\n              actions: assign({ error: (context, event) => event.data }),\n            },\n          },\n        },\n        success: {},\n        fail: {},\n      },\n    },\n  },\n  on: {\n    LOAD_STORIES: {\n      target: \"list.loading\",\n    },\n    LOAD_COMMENTS: {\n      target: \"comments.loading\",\n    },\n  },\n});\n","import React, { useContext, useEffect, Fragment } from \"react\";\nimport { MachineContext } from \"state\";\nimport { NavLink } from \"react-router-dom\";\n\nfunction Home() {\n  const [machine, sendToMachine] = useContext(MachineContext);\n\n  const { error, stories } = machine.context;\n\n  useEffect(() => {\n    sendToMachine(\"LOAD_STORIES\");\n  }, []);\n\n  return (\n    <div style={{ padding: 20 }}>\n      {machine.matches(\"list.loading\") && <h2>Loading...</h2>}\n      {machine.matches(\"list.fail\") && (\n        <div style={{ color: \"red\" }}>\n          Error loading stories: {error.toString()}\n        </div>\n      )}\n      <div style={{ display: \"flex\" }}>\n        <div style={{ display: \"flex\" }}>\n          {stories && stories.length > 0 && (\n            <div className=\"\">\n              {stories.map((storyItem, index) => {\n                return (\n                  <Fragment key={\"story_\" + storyItem.id}>\n                    <div className=\"story-item-container\">\n                      <NavLink to={\"/comments/\" + storyItem.id}>\n                        <h4>{storyItem.title}</h4>\n                      </NavLink>\n                      <h5>\n                        Comments: {storyItem.comments_count}\n                        <b style={{ marginLeft: \"100px\" }}>\n                          By: {storyItem.user}\n                        </b>\n                      </h5>\n                    </div>\n                    <hr />\n                  </Fragment>\n                );\n              })}\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Home;\n","import React, { useContext, useEffect, Fragment } from \"react\";\nimport { MachineContext } from \"state\";\n\nfunction Comments(props) {\n  const [machine, sendToMachine] = useContext(MachineContext);\n\n  const { error, comments, story } = machine.context;\n\n  useEffect(() => {\n    sendToMachine(\"LOAD_COMMENTS\", { storyId: props.match.params.storyId });\n  }, []);\n\n  return (\n    <div style={{ padding: 20 }}>\n      {machine.matches(\"comments.loading\") && <h2>Loading...</h2>}\n      {machine.matches(\"comments.fail\") && (\n        <div style={{ color: \"red\" }}>\n          Error loading stories: {error.toString()}\n        </div>\n      )}\n      {machine.matches(\"comments.success\") && (\n        <div className=\"story-item-container\">\n          <button onClick={() => props.history.goBack()}>Go Back</button>\n          <br />\n          <h2>{story.title}</h2>\n          <div>\n            <h3>Comments:</h3>\n            <br />\n            {comments.map((comment, index) => {\n              return comment.deleted ? (\n                \"\"\n              ) : (\n                <Fragment key={\"comment_\" + comment.id}>\n                  <div>\n                    <div\n                      dangerouslySetInnerHTML={{\n                        __html: comment.text,\n                      }}\n                    />\n                    <b style={{ color: \"green\" }}>By: {comment.by}</b>\n                  </div>\n                  <hr />\n                </Fragment>\n              );\n            })}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default Comments;\n","import { useMachine } from \"@xstate/react\";\nimport Home from \"components/home\";\nimport Comments from \"components/comments\";\nimport React from \"react\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport { appMachine, MachineContext } from \"state\";\n\nfunction App() {\n  const [currentMachine, sendToMachine] = useMachine(appMachine);\n\n  return (\n    <MachineContext.Provider value={[currentMachine, sendToMachine]}>\n      <Router>\n        <div className=\"App\">\n          <Switch>\n            <Route path=\"/comments/:storyId\" component={Comments} />\n            <Route path=\"/\" component={Home} />\n          </Switch>\n        </div>\n      </Router>\n    </MachineContext.Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import App from 'components/app';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}